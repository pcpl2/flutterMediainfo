name: CI_Build_Example

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  flutter_version: "2.8.1"


jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: windows-2019
          build_target: windows
          build_path: build\windows\runner\Release
          asset_extension: .zip
          target: Windows
        - os: ubuntu-20.04
          build_target: linux
          build_path: build/linux/x64/release/bundle
          asset_extension: .tar.gz
          target: Linux
        - os: macos-11
          build_target: macos
          build_path: build/macos/Build/Products/Release
          asset_extension: .zip
          target: macOS
        - os: macos-10.15
          build_target: macos
          build_path: build/macos/Build/Products/Release
          asset_extension: .zip
          target: macOS
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.flutter_version }}
          channel: 'stable'

      - name: Enable desktop support ubuntu
        run: | 
          flutter config --enable-linux-desktop
          flutter config --enable-windows-desktop
          flutter config --enable-macos-desktop

      - name: Cache Flutter dependencies
        uses: actions/cache@v1
        with:
          path: ${{ env.PUB_CACHE }}
          key: ${{ runner.os }}-flutter-dependencies-cache-${{ env.flutter_version }}

      - if: matrix.target == 'Linux'
        name: Patch for linux build
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev liblzma-dev clang
          sudo ldconfig
          flutter doctor

      - name: Restore packages
        run: flutter pub get

      - name: Analyze
        run: flutter analyze

      - name: Run tests
        run: flutter test --coverage

      - name: Build example
        run: | 
          cd example
          flutter build -v ${{ matrix.build_target }} --release

      - name: Compress build for Linux
        if: matrix.target == 'Linux'
        run: tar czf $GITHUB_WORKSPACE/FlutterMediaInfo_Example_${{ matrix.target }}.tar.gz *
        working-directory: ${{ matrix.build_path }}

      - name: Compress build for macOS
        if: matrix.target == 'macOS'
        run: ditto -c -k --sequesterRsrc --keepParent FlutterMediaInfo_Example.app $GITHUB_WORKSPACE/FlutterMediaInfo_Example_${{ matrix.target }}.zip
        working-directory: ${{ matrix.build_path }}
        
      - name: Compress build for Windows
        if: matrix.target == 'Windows'
        run: compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\FlutterMediaInfo_Example_${{ matrix.target }}.zip
        working-directory: ${{ matrix.build_path }}
      
      - name: Upload generated application to the artifacts.
        uses: actions/upload-artifact@v2
        with:
          name: FlutterMediaInfo Example ${{ matrix.build_target }}
          path: FlutterMediaInfo_Example_${{ matrix.target }}${{ matrix.asset_extension }}
          retention-days: 5
